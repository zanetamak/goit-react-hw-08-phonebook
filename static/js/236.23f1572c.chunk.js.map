{"version":3,"file":"static/js/236.23f1572c.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register.jsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx","../node_modules/@chakra-ui/form-control/src/form-label.tsx","../node_modules/@chakra-ui/form-control/src/use-form-control.ts","../node_modules/@chakra-ui/input/src/input.tsx","../node_modules/@chakra-ui/layout/src/container.tsx","../node_modules/@chakra-ui/layout/src/heading.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Box, FormControl, FormLabel, Input, Button } from '@chakra-ui/react';\nimport { register } from '../../redux/auth/operations';\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const [userData, setUserData] = useState({ name: '', email: '', password: '' });\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch(register(userData));\n    setUserData({ name: '', email: '', password: '' });\n  };\n\n  const handleChange = (e) => setUserData({ ...userData, [e.target.name]: e.target.value });\n\n  return (\n    <Box as=\"form\" onSubmit={handleSubmit} mx=\"auto\" maxW=\"400px\">\n      {['name', 'email', 'password'].map((field) => (\n        <FormControl key={field} mt=\"10px\">\n          <FormLabel>{field === 'name' ? 'Username' : field}</FormLabel>\n          <Input\n            width=\"100%\"\n            type={field === 'password' ? 'password' : field}\n            name={field}\n            value={userData[field]}\n            onChange={handleChange}\n          />\n        </FormControl>\n      ))}\n      <Button mt=\"20px\" type=\"submit\" width=\"100%\">\n        Register\n      </Button>\n    </Box>\n  );\n};\n\n","import { Container, Box, Heading } from '@chakra-ui/react';\nimport { Link } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { RegisterForm } from '../components/RegisterForm/RegisterForm'\n\nexport default function Register() {\n  return (\n    <Container maxW=\"2xl\" centerContent>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <Box padding=\"6\" mt=\"10\">\n        <Heading size=\"xl\">Register</Heading>\n        <RegisterForm />\n        Do you have account?{' '}\n        <Link to=\"/login\" style={{ textDecoration: 'underline' }}>\n          Log in\n        </Link>\n      </Box>\n    </Container>\n  );\n}\n\n// Box jest ogólnym komponentem do stylizacji i układu, podczas gdy Container jest specjalizowanym \n// komponentem do obsługi responsywnego układu strony, zapewniając elastyczne zarządzanie szerokością \n// zawartości.W zależności od potrzeb projektu możesz używać jednego lub drugiego komponentu.","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n    }),\n    [htmlProps, isDisabled, isFocused, isInvalid, isReadOnly],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactNode\n   */\n  requiredIndicator?: React.ReactNode\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface ContainerProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Container\"> {\n  /**\n   * If `true`, container will center its children\n   * regardless of their width.\n   *\n   * @default false\n   */\n  centerContent?: boolean\n}\n\n/**\n * Layout component used to wrap app or website content\n *\n * It sets `margin-left` and `margin-right` to `auto`,\n * to keep its content centered.\n *\n * It also sets a default max-width of `60ch` (60 characters).\n *\n * @see Docs https://chakra-ui.com/docs/components/container\n */\nexport const Container = forwardRef<ContainerProps, \"div\">(function Container(\n  props,\n  ref,\n) {\n  const { className, centerContent, ...rest } = omitThemingProps(props)\n\n  const styles = useStyleConfig(\"Container\", props)\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-container\", className)}\n      {...rest}\n      __css={{\n        ...styles,\n        ...(centerContent && {\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }),\n      }}\n    />\n  )\n})\n\nContainer.displayName = \"Container\"\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface HeadingProps\n  extends HTMLChakraProps<\"h2\">,\n    ThemingProps<\"Heading\"> {}\n\n/**\n * `Heading` is used to render semantic HTML heading elements.\n *\n * By default, renders as `h2` with themantic size `xl`\n *\n * @see Docs https://chakra-ui.com/docs/components/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h2\">(function Heading(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nHeading.displayName = \"Heading\"\n"],"names":["RegisterForm","dispatch","useDispatch","_useState","useState","name","email","password","_useState2","_slicedToArray","userData","setUserData","handleChange","e","_objectSpread","_defineProperty","target","value","_jsxs","Box","as","onSubmit","preventDefault","register","mx","maxW","children","map","field","FormControl","mt","_jsx","FormLabel","Input","width","type","onChange","Button","Register","Container","centerContent","Helmet","padding","Heading","size","Link","to","style","textDecoration","createContext","errorMessage","_createContext2","FormControlStylesProvider","useFormControlStyles","strict","_createContext4","FormControlProvider","useFormControlContext","forwardRef","props","ref","styles","useMultiStyleConfig","idProp","id","isRequired","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","useId","labelId","feedbackId","helpTextId","hasFeedbackText","setHasFeedbackText","_useState4","hasHelpText","setHasHelpText","_useState6","isFocused","setFocus","getHelpTextProps","useCallback","forwardedRef","mergeRefs","node","getLabelProps","dataAttr","htmlFor","getErrorMessageProps","getRootProps","role","getRequiredIndicatorProps","onFocus","onBlur","useFormControlProvider","omitThemingProps","context","_","className","cx","chakra","div","__css","displayName","helperText","passedProps","useStyleConfig","_props$requiredIndica","requiredIndicator","RequiredIndicator","_props$optionalIndica","optionalIndicator","rest","ownProps","_a","label","display","textAlign","span","useFormControl","disabled","readOnly","required","labelIds","push","join","_b","_c","callAllHandlers","useFormControlProps","ariaAttr","htmlSize","input","_className","flexDirection","alignItems","h2"],"sourceRoot":""}