{"version":3,"file":"static/js/267.7bc48c65.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","../node_modules/@chakra-ui/layout/src/grid.tsx","../node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs","../node_modules/@chakra-ui/layout/src/simple-grid.tsx","../node_modules/@chakra-ui/button/src/icon-button.tsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx","../node_modules/@chakra-ui/form-control/src/form-label.tsx","../node_modules/@chakra-ui/form-control/src/use-form-control.ts","../node_modules/@chakra-ui/input/src/input.tsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { FormControl, FormLabel, Input, Button, Box } from '@chakra-ui/react';\n\nconst ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const [formData, setFormData] = useState({ name: '', number: '' });\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prevData) => ({ ...prevData, [name]: value }));\n  };\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n\n    const newContactExists = contacts.some((contact) => contact.name === formData.name);\n\n    if (newContactExists) {\n      alert(`${formData.name} is in use. Try another name.`);\n      return;\n    }\n\n    dispatch(createContact(formData));\n    setFormData({ name: '', number: '' });\n  };\n\n  return (\n    <Box as=\"form\" onSubmit={handleSubmit} my=\"10\">\n      <FormControl mb=\"5\">\n        <FormLabel htmlFor=\"number\">Number</FormLabel>\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          required\n          value={formData.number}\n          onChange={handleChange}\n        />\n      </FormControl>\n\n      <FormControl mb=\"5\">\n        <FormLabel htmlFor=\"name\">Name</FormLabel>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          required\n          value={formData.name}\n          onChange={handleChange}\n        />\n      </FormControl>\n\n      <Button type=\"submit\">Add contact</Button>\n    </Box>\n  );\n};\n\nexport default ContactForm;","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface GridOptions {\n  /**\n   * Shorthand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Shorthand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Shorthand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Shorthand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Shorthand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Shorthand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Shorthand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Shorthand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Shorthand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Shorthand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Shorthand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof GridOptions>,\n    GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">(function Grid(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nGrid.displayName = \"Grid\"\n","// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n","import {\n  forwardRef,\n  getToken,\n  ResponsiveValue,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component that uses the `Grid` component and provides\n * a simpler interface to create responsive grid layouts.\n *\n * Provides props that easily define columns and spacing.\n *\n * @see Docs https://chakra-ui.com/simplegrid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">(\n  function SimpleGrid(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } =\n      props\n\n    const theme = useTheme()\n    const templateColumns = minChildWidth\n      ? widthToColumns(minChildWidth, theme)\n      : countToColumns(columns)\n\n    return (\n      <Grid\n        ref={ref}\n        gap={spacing}\n        columnGap={spacingX}\n        rowGap={spacingY}\n        templateColumns={templateColumns}\n        {...rest}\n      />\n    )\n  },\n)\n\nSimpleGrid.displayName = \"SimpleGrid\"\n\nfunction toPx(n: string | number) {\n  return typeof n === \"number\" ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any, theme: Record<string, any>) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme)\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`\n  })\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    value === null ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n","import { forwardRef } from \"@chakra-ui/system\"\nimport { cloneElement, isValidElement } from \"react\"\nimport { Button, ButtonProps } from \"./button\"\n\ntype OmittedProps =\n  | \"leftIcon\"\n  | \"rightIcon\"\n  | \"loadingText\"\n  | \"iconSpacing\"\n  | \"spinnerPlacement\"\n\ninterface BaseButtonProps extends Omit<ButtonProps, OmittedProps> {}\n\nexport interface IconButtonProps extends BaseButtonProps {\n  /**\n   * The icon to be used in the button.\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * If `true`, the button will be perfectly round. Else, it'll be slightly round\n   *\n   * @default false\n   */\n  isRound?: boolean\n  /**\n   * A11y: A label that describes the button\n   */\n  \"aria-label\": string\n}\n\n/**\n * Icon button renders an icon within a button.\n *\n * @see Docs https://chakra-ui.com/docs/components/icon-button\n */\nexport const IconButton = forwardRef<IconButtonProps, \"button\">(\n  (props, ref) => {\n    const { icon, children, isRound, \"aria-label\": ariaLabel, ...rest } = props\n\n    /**\n     * Passing the icon as prop or children should work\n     */\n    const element = icon || children\n    const _children = isValidElement(element)\n      ? cloneElement(element as any, {\n          \"aria-hidden\": true,\n          focusable: false,\n        })\n      : null\n\n    return (\n      <Button\n        padding=\"0\"\n        borderRadius={isRound ? \"full\" : undefined}\n        ref={ref}\n        aria-label={ariaLabel}\n        {...rest}\n      >\n        {_children}\n      </Button>\n    )\n  },\n)\n\nIconButton.displayName = \"IconButton\"\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter, selectContacts } from '../../redux/contacts/selectors';\nimport { fetchContacts } from '../../redux/contacts/operations';\nimport {\n  Text,\n  IconButton,\n  CloseButton,\n  SimpleGrid,\n  Box,\n} from '@chakra-ui/react';\nimport { selectIsLoading } from '../../redux/contacts/selectors';\nimport { deleteContact } from '../../redux/contacts/operations';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const filteredContacts = Array.isArray(contacts)\n    ? contacts.filter(\n        contact =>\n          contact.name.toLowerCase().includes(filter.toLowerCase()) ||\n          (contact.phone && contact.number.includes(filter))\n      )\n    : [];\n\n  const handleDelete = idToDelete => {\n    dispatch(deleteContact(idToDelete));\n  };\n\n  return (\n    <>\n      {isLoading ? (\n        <Text>Loading...</Text>\n      ) : (\n        <SimpleGrid columns={3} spacing={1} overflow=\"hidden\" width=\"800px\">\n          {filteredContacts.length > 0 ? (\n            filteredContacts.map(({ id, name, number }) => (\n              <Box\n                key={id}>\n                <Box p=\"1\">\n                  <IconButton\n                    icon={<CloseButton />}\n                    onClick={() => handleDelete(id)}\n                  />\n                  <Text>{name}</Text>\n                  <Text>{number}</Text>\n                </Box>\n              </Box>\n            ))\n          ) : (\n            <Text>No contacts found</Text>\n          )}\n        </SimpleGrid>\n      )}\n    </>\n  );\n};\n\nexport default ContactList;\n\n// Dodanie filteredContacts.length > 0 przed mapowaniem, aby sprawdzić,\n// czy są dostępne kontakty do wyrenderowania.\n\n// ułatwia układ komórkowy (grid layout). Jest to prosty sposób na tworzenie siatek o stałej liczbie\n// kolumn, które automatycznie dostosowują się do szerokości ekranu.","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/contactsSlice';\nimport { selectFilter } from '../../redux/contacts/selectors';\nimport { Input, FormControl, FormLabel } from '@chakra-ui/react';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const handleFilterChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <FormControl id=\"filter\" mb=\"5\">\n      <FormLabel>Search list:</FormLabel>\n      <Input\n        type=\"search\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleFilterChange}\n        placeholder=\"Find contacts by name or phone number\"\n        required\n      />\n    </FormControl>\n  );\n};\n\nexport default Filter;","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\n\nimport ContactForm from '../components/ContactForm/ContactForm';\nimport ContactList from '../components/ContactList/ContactList';\nimport Filter from '../components/Filter/Filter';\n\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { selectIsLoading } from '../redux/contacts/selectors';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Helmet>\n        <h1>Phonebook</h1>\n      </Helmet>\n      <ContactForm />\n      {isLoading && <div>Request in progress...</div>}\n      {!isLoading && <Filter />}\n      <ContactList />\n    </div>\n  );\n};\n\nexport default App;\n\n // Jeśli isLoading jest prawdziwe, renderuje null,\n // w przeciwnym razie renderuje komponent Filter.\n\n// czy lepiej uzywac chakra tutaj? jesli nie to dlaczego ? ","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n    }),\n    [htmlProps, isDisabled, isFocused, isInvalid, isReadOnly],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactNode\n   */\n  requiredIndicator?: React.ReactNode\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","useSelector","dispatch","useDispatch","_useState","useState","name","number","_useState2","_slicedToArray","formData","setFormData","handleChange","e","_e$target","target","value","prevData","_objectSpread","_defineProperty","_jsxs","Box","as","onSubmit","evt","preventDefault","some","contact","alert","concat","createContact","my","children","FormControl","mb","_jsx","FormLabel","htmlFor","Input","type","required","onChange","Button","Grid","forwardRef","props","ref","templateAreas","gap","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","rest","styles","display","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","chakra","div","__css","displayName","Object","freeze","mapResponsive","prop","mapper","Array","isArray","map","item","isObject","keys","reduce","result","key","SimpleGrid","columns","spacingX","spacingY","spacing","minChildWidth","theme","useTheme","width","n","_value","getToken","widthToColumns","IconButton","icon","isRound","ariaLabel","element","_children","isValidElement","cloneElement","focusable","padding","borderRadius","useEffect","fetchContacts","filteredContacts","toLowerCase","includes","phone","_Fragment","Text","overflow","length","_ref","id","p","CloseButton","onClick","idToDelete","deleteContact","setFilter","placeholder","Helmet","ContactForm","Filter","ContactList","createContext","errorMessage","_createContext2","FormControlStylesProvider","useFormControlStyles","strict","_createContext4","FormControlProvider","useFormControlContext","useMultiStyleConfig","idProp","isRequired","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","useId","labelId","feedbackId","helpTextId","hasFeedbackText","setHasFeedbackText","_useState4","hasHelpText","setHasHelpText","_useState6","isFocused","setFocus","getHelpTextProps","useCallback","forwardedRef","mergeRefs","node","getLabelProps","dataAttr","getErrorMessageProps","getRootProps","role","getRequiredIndicatorProps","onFocus","onBlur","useFormControlProvider","omitThemingProps","context","_","className","cx","field","helperText","passedProps","useStyleConfig","_props$requiredIndica","requiredIndicator","RequiredIndicator","_props$optionalIndica","optionalIndicator","ownProps","_a","label","textAlign","span","useFormControl","disabled","readOnly","labelIds","push","join","_b","_c","callAllHandlers","useFormControlProps","ariaAttr","htmlSize","input","_className","size"],"sourceRoot":""}