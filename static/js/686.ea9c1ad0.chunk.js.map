{"version":3,"file":"static/js/686.ea9c1ad0.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","../node_modules/@chakra-ui/layout/src/grid.tsx","../node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs","../node_modules/@chakra-ui/layout/src/simple-grid.tsx","../node_modules/@chakra-ui/card/src/card-context.tsx","../node_modules/@chakra-ui/card/src/card.tsx","../node_modules/@chakra-ui/card/src/card-header.tsx","../node_modules/@chakra-ui/button/src/icon-button.tsx","../node_modules/@chakra-ui/card/src/card-body.tsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx","../node_modules/@chakra-ui/form-control/src/form-label.tsx","../node_modules/@chakra-ui/form-control/src/use-form-control.ts","../node_modules/@chakra-ui/input/src/input.tsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","export const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;","import React from 'react';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { addContact } from '../../redux/contacts/operations';\nimport { Box, Input, Button, FormControl, FormLabel } from '@chakra-ui/react';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  // Dodawanie nowego kontaktu\n  const handleAddContact = (e) => {\n    e.preventDefault();\n\n    const form = e.target;\n    const name = form.name.value.trim();\n    const number = form.number.value.trim();\n\n    const isContactExists = contacts.findIndex(\n      (contact) => contact.name.toLowerCase() === name.toLowerCase()\n    ) !== -1;\n\n    if (isContactExists) {\n      alert(`${name} is already in contacts.`);\n      form.reset();\n      return;\n    }\n\n    // Dodanie kontaktu do Redux Store\n    const newContact = {\n      id: nanoid(),\n      name: name,\n      number: number,\n    };\n\n    dispatch(addContact(newContact));\n\n    // Resetowanie formularza po dodaniu kontaktu\n    form.reset();\n  };\n\n  return (\n    <Box as=\"form\" onSubmit={handleAddContact}>\n      <FormControl>\n        <FormLabel>Name</FormLabel>\n        <Input\n          autoComplete=\"off\"\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"e.g. John Doe\"\n          required\n        />\n      </FormControl>\n      <FormControl>\n        <FormLabel>Number</FormLabel>\n        <Input\n          autoComplete=\"off\"\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"e.g. 123-456-789\"\n          required\n        />\n      </FormControl>\n      <Button type=\"submit\" mt={4} colorScheme=\"teal\">\n        Add contact\n      </Button>\n    </Box>\n  );\n};\n\nexport default ContactForm;","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface GridOptions {\n  /**\n   * Shorthand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Shorthand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Shorthand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Shorthand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Shorthand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Shorthand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Shorthand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Shorthand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Shorthand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Shorthand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Shorthand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof GridOptions>,\n    GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">(function Grid(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nGrid.displayName = \"Grid\"\n","// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n","import {\n  forwardRef,\n  getToken,\n  ResponsiveValue,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component that uses the `Grid` component and provides\n * a simpler interface to create responsive grid layouts.\n *\n * Provides props that easily define columns and spacing.\n *\n * @see Docs https://chakra-ui.com/simplegrid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">(\n  function SimpleGrid(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } =\n      props\n\n    const theme = useTheme()\n    const templateColumns = minChildWidth\n      ? widthToColumns(minChildWidth, theme)\n      : countToColumns(columns)\n\n    return (\n      <Grid\n        ref={ref}\n        gap={spacing}\n        columnGap={spacingX}\n        rowGap={spacingY}\n        templateColumns={templateColumns}\n        {...rest}\n      />\n    )\n  },\n)\n\nSimpleGrid.displayName = \"SimpleGrid\"\n\nfunction toPx(n: string | number) {\n  return typeof n === \"number\" ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any, theme: Record<string, any>) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme)\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`\n  })\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    value === null ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n","import { createStylesContext } from \"@chakra-ui/system\"\n\nexport const [CardStylesProvider, useCardStyles] = createStylesContext(\"Card\")\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  forwardRef,\n  HTMLChakraProps,\n  ThemingProps,\n  chakra,\n  omitThemingProps,\n  useMultiStyleConfig,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { CardStylesProvider } from \"./card-context\"\n\nexport type CardOptions = {\n  /**\n   * The flex direction of the card\n   */\n  direction?: SystemProps[\"flexDirection\"]\n  /**\n   * The flex alignment of the card\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * The flex distribution of the card\n   */\n  justify?: SystemProps[\"justifyContent\"]\n}\n\nexport interface CardProps\n  extends HTMLChakraProps<\"div\">,\n    CardOptions,\n    ThemingProps<\"Card\"> {}\n\nexport const Card = forwardRef<CardProps, \"div\">(function Card(props, ref) {\n  const {\n    className,\n    children,\n    direction = \"column\",\n    justify,\n    align,\n    ...rest\n  } = omitThemingProps(props)\n\n  const styles = useMultiStyleConfig(\"Card\", props)\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-card\", className)}\n      __css={{\n        display: \"flex\",\n        flexDirection: direction,\n        justifyContent: justify,\n        alignItems: align,\n        position: \"relative\",\n        minWidth: 0,\n        wordWrap: \"break-word\",\n        ...styles.container,\n      }}\n      {...rest}\n    >\n      <CardStylesProvider value={styles}>{children}</CardStylesProvider>\n    </chakra.div>\n  )\n})\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport { forwardRef, HTMLChakraProps, chakra } from \"@chakra-ui/system\"\nimport { useCardStyles } from \"./card-context\"\n\nexport interface CardHeaderProps extends HTMLChakraProps<\"div\"> {}\n\nexport const CardHeader = forwardRef<CardHeaderProps, \"div\">(\n  function CardHeader(props, ref) {\n    const { className, ...rest } = props\n    const styles = useCardStyles()\n    return (\n      <chakra.div\n        ref={ref}\n        className={cx(\"chakra-card__header\", className)}\n        __css={styles.header}\n        {...rest}\n      />\n    )\n  },\n)\n","import { forwardRef } from \"@chakra-ui/system\"\nimport { cloneElement, isValidElement } from \"react\"\nimport { Button, ButtonProps } from \"./button\"\n\ntype OmittedProps =\n  | \"leftIcon\"\n  | \"rightIcon\"\n  | \"loadingText\"\n  | \"iconSpacing\"\n  | \"spinnerPlacement\"\n\ninterface BaseButtonProps extends Omit<ButtonProps, OmittedProps> {}\n\nexport interface IconButtonProps extends BaseButtonProps {\n  /**\n   * The icon to be used in the button.\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * If `true`, the button will be perfectly round. Else, it'll be slightly round\n   *\n   * @default false\n   */\n  isRound?: boolean\n  /**\n   * A11y: A label that describes the button\n   */\n  \"aria-label\": string\n}\n\n/**\n * Icon button renders an icon within a button.\n *\n * @see Docs https://chakra-ui.com/docs/components/icon-button\n */\nexport const IconButton = forwardRef<IconButtonProps, \"button\">(\n  (props, ref) => {\n    const { icon, children, isRound, \"aria-label\": ariaLabel, ...rest } = props\n\n    /**\n     * Passing the icon as prop or children should work\n     */\n    const element = icon || children\n    const _children = isValidElement(element)\n      ? cloneElement(element as any, {\n          \"aria-hidden\": true,\n          focusable: false,\n        })\n      : null\n\n    return (\n      <Button\n        padding=\"0\"\n        borderRadius={isRound ? \"full\" : undefined}\n        ref={ref}\n        aria-label={ariaLabel}\n        {...rest}\n      >\n        {_children}\n      </Button>\n    )\n  },\n)\n\nIconButton.displayName = \"IconButton\"\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport { forwardRef, HTMLChakraProps, chakra } from \"@chakra-ui/system\"\nimport { useCardStyles } from \"./card-context\"\n\nexport interface CardBodyProps extends HTMLChakraProps<\"div\"> {}\n\nexport const CardBody = forwardRef<CardBodyProps, \"div\">(function CardBody(\n  props,\n  ref,\n) {\n  const { className, ...rest } = props\n  const styles = useCardStyles()\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-card__body\", className)}\n      __css={styles.body}\n      {...rest}\n    />\n  )\n})\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  Text,\n  IconButton,\n  CloseButton,\n  SimpleGrid,\n  Card,\n  CardBody,\n  CardHeader,\n} from '@chakra-ui/react';\nimport {\n  selectFilter,\n  selectContacts,\n  selectIsLoading,\n} from '../../redux/contacts/selectors';\nimport { deleteContact, fetchContacts } from '../../redux/contacts/operations';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleDeleteContact = async (id) => {\n    try {\n      await dispatch(deleteContact(id));\n    } catch (error) {\n      console.error('Error deleting contact:', error);\n    }\n  };\n\n  // Filtrowanie kontaktów na podstawie wartości filtra\n  const filteredContacts = Array.isArray(contacts)\n    ? contacts.filter((contact) =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      )\n    : [];\n\n  return (\n    <>\n      {isLoading ? (\n        <Text>Loading...</Text>\n      ) : (\n        <SimpleGrid columns={[1, null, 2]} spacing={5} mx=\"auto\" maxW=\"400px\">\n          {filteredContacts.length > 0 ? (\n            filteredContacts.map(({ id, name, number }) => (\n              <Card key={id}>\n                <CardHeader>\n                  <IconButton\n                    icon={<CloseButton />}\n                    onClick={() => handleDeleteContact(id)}\n                  />\n                </CardHeader>\n                <CardBody>\n                  <Text>{name}</Text>\n                  <Text>{number}</Text>\n                </CardBody>\n              </Card>\n            ))\n          ) : (\n            <Text>No contacts found</Text>\n          )}\n        </SimpleGrid>\n      )}\n    </>\n  );\n};\n\nexport default ContactList;\n\n// Dodanie filteredContacts.length > 0 przed mapowaniem, aby sprawdzić,\n// czy są dostępne kontakty do wyrenderowania.\n\n// ułatwia układ komórkowy (grid layout). Jest to prosty sposób na tworzenie siatek o stałej liczbie\n// kolumn, które automatycznie dostosowują się do szerokości ekranu.","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/contactsSlice';\nimport { FormControl, FormLabel, Input } from '@chakra-ui/react';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const onChange = (e) => {\n    const value = e.target.value.toLowerCase();\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <FormControl mb=\"4\">\n      <FormLabel>Find contacts by name or phone number</FormLabel>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        onChange={onChange}\n        placeholder=\"Enter name or phone number\"\n      />\n    </FormControl>\n  );\n};\n\nexport default Filter;","import React from 'react';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\n\nimport ContactForm from '../components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\n\nimport { fetchContacts } from '../redux/contacts/operations';\n//  odpowiada za pobieranie kontaktów. \nimport { selectIsLoading } from '../redux/contacts/selectors';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Helmet>\n        <h1>Phonebook</h1>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      {isLoading ? null : <Filter />}\n      <ContactList />\n    </div>\n  );\n};\n\nexport default App;\n // Jeśli isLoading jest prawdziwe, renderuje null,\n // w przeciwnym razie renderuje komponent Filter.\n\n// czy lepiej uzywac chakra tutaj? jesli nie to dlaczego ? ","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n    }),\n    [htmlProps, isDisabled, isFocused, isInvalid, isReadOnly],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactNode\n   */\n  requiredIndicator?: React.ReactNode\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n"],"names":["nanoid","size","arguments","length","undefined","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","dispatch","useDispatch","useSelector","_jsxs","Box","as","onSubmit","e","preventDefault","form","target","name","value","trim","number","findIndex","contact","toLowerCase","alert","concat","reset","newContact","addContact","children","FormControl","_jsx","FormLabel","Input","autoComplete","type","placeholder","required","Button","mt","colorScheme","Grid","forwardRef","props","ref","templateAreas","gap","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","rest","styles","display","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","chakra","div","__css","displayName","Object","freeze","mapResponsive","prop","mapper","Array","isArray","map","item","isObject","keys","reduce","result","key","SimpleGrid","columns","spacingX","spacingY","spacing","minChildWidth","theme","useTheme","width","n","_value","getToken","widthToColumns","createStylesContext","_createStylesContext2","CardStylesProvider","useCardStyles","Card","omitThemingProps","className","_omitThemingProps$dir","direction","justify","align","useMultiStyleConfig","cx","flexDirection","justifyContent","alignItems","position","minWidth","wordWrap","container","CardHeader","header","IconButton","icon","isRound","ariaLabel","element","_children","isValidElement","cloneElement","focusable","padding","borderRadius","CardBody","body","useEffect","fetchContacts","handleDeleteContact","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","deleteContact","t0","console","error","stop","_x","apply","filteredContacts","includes","_Fragment","Text","mx","maxW","_ref2","CloseButton","onClick","mb","onChange","setFilter","Helmet","ContactForm","Filter","ContactList","createContext","errorMessage","_createContext2","FormControlStylesProvider","useFormControlStyles","strict","_createContext4","FormControlProvider","useFormControlContext","idProp","isRequired","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","useId","labelId","feedbackId","helpTextId","useState","_useState2","hasFeedbackText","setHasFeedbackText","_useState4","hasHelpText","setHasHelpText","_useState6","isFocused","setFocus","getHelpTextProps","useCallback","forwardedRef","mergeRefs","node","getLabelProps","dataAttr","htmlFor","getErrorMessageProps","getRootProps","role","getRequiredIndicatorProps","onFocus","onBlur","useFormControlProvider","context","_","field","helperText","passedProps","useStyleConfig","_props$requiredIndica","requiredIndicator","RequiredIndicator","_props$optionalIndica","optionalIndicator","ownProps","_a","label","textAlign","span","useFormControl","disabled","readOnly","labelIds","push","join","_b","_c","callAllHandlers","useFormControlProps","ariaAttr","htmlSize","input","_className"],"sourceRoot":""}